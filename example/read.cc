/*
		Estimate  Pi by means of rejection sampling. Here,
		the set of random number pairs generated by 'write'
		is used.
*/

#include <iostream>
#include <cmath>
#include "DataStream.h"

struct Point{
	double x, y;
};

int main(int argc, char **argv){

	// Data containers
	Point R;

	// DataStream
	DataStream::File Obj;
	Obj.Open("Data.h5", DataStream::Read);

	// Datasets
	Obj.Add("Group/Data", &R);

	// Initialize
	Obj.Configure();

	int N = Obj.GetEvent("Group/Data");
	std::cout << "Total event : " << N << "\n";

	// Attributes
	char Gen[50];
	Obj.GetAttribute("Group", "Generator", Gen);
	std::cout << "Random number generator : " << Gen << "\n";

	// Load data
	double Pi = 0.;
	for(int n = 0; n < N; n++){
		Obj.Read(n);
		
		double r2 = R.x*R.x + R.y*R.y;
		if(r2 <= 1.) Pi++;
	}

	std::cout << "Pi : " << M_PI << "\n"; 
	std::cout << "Pi (estimated) : " << 4*Pi/N << "\n";

	Obj.Close();
	return 0;
}
